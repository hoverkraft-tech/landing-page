---
import { Icon } from 'astro-icon/components';
import { languages } from '~/i18n/ui';
import { getLangFromUrl, useTranslatedPath } from '~/i18n/utils';

export interface Props {
  showLabels?: boolean;
  class?: string;
}

const { showLabels = false, class: className = '' } = Astro.props;

const currentLang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(currentLang);

// Get current path without language prefix
const pathname = Astro.url.pathname;
const pathWithoutLang = pathname.replace(/^\/(en|fr)(\/|$)/, '/');
const normalizedPath = pathWithoutLang === '' ? '/' : pathWithoutLang;

// Function to get the equivalent path in the target language
const getLocalizedPath = (targetLang: keyof typeof languages) => translatePath(normalizedPath, targetLang);
---

<language-selector class={`relative inline-flex ${className}`}>
  <button
    type="button"
    class="text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-hidden focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
    aria-label="Select language"
    data-toggle-language
  >
    <Icon name="tabler:language" class="w-5 h-5" />
    {showLabels && <span class="ml-2">{languages[currentLang]}</span>}
    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-1" />
  </button>

  <div
    class="hidden absolute right-0 top-full mt-2 w-40 rounded-lg shadow-lg bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 z-50"
    data-language-menu
  >
    {
      Object.entries(languages).map(([lang, label]) => {
        const typedLang = lang as keyof typeof languages;

        return (
          <a
            href={getLocalizedPath(typedLang)}
            class:list={[
              'block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 first:rounded-t-lg last:rounded-b-lg',
              {
                'bg-gray-50 dark:bg-gray-900 font-semibold': currentLang === lang,
                'text-gray-700 dark:text-gray-300': currentLang !== lang,
              },
            ]}
            hreflang={typedLang}
          >
            <span class="flex items-center">
              {lang === 'fr' ? 'ðŸ‡«ðŸ‡·' : 'ðŸ‡¬ðŸ‡§'}
              <span class="ml-2">{label}</span>
              {currentLang === lang && <Icon name="tabler:check" class="w-4 h-4 ml-auto text-primary" />}
            </span>
          </a>
        );
      })
    }
  </div>
</language-selector>

<script type="module" is:inline>
  class LanguageSelectorElement extends HTMLElement {
    static instances = new Set();
    static documentListenersAttached = false;

    static handleGlobalClick(event) {
      LanguageSelectorElement.instances.forEach((instance) => instance.handleDocumentClick(event));
    }

    static handleGlobalKeydown(event) {
      if (event.key !== 'Escape') {
        return;
      }

      LanguageSelectorElement.instances.forEach((instance) => instance.handleEscape());
    }

    static attachDocumentListeners() {
      if (LanguageSelectorElement.documentListenersAttached) {
        return;
      }

      document.addEventListener('click', LanguageSelectorElement.handleGlobalClick);
      document.addEventListener('keydown', LanguageSelectorElement.handleGlobalKeydown);
      LanguageSelectorElement.documentListenersAttached = true;
    }

    static detachDocumentListenersIfUnused() {
      if (!LanguageSelectorElement.documentListenersAttached || LanguageSelectorElement.instances.size > 0) {
        return;
      }

      document.removeEventListener('click', LanguageSelectorElement.handleGlobalClick);
      document.removeEventListener('keydown', LanguageSelectorElement.handleGlobalKeydown);
      LanguageSelectorElement.documentListenersAttached = false;
    }

    button;
    menu;
    initialized = false;

    handleButtonClick = (event) => {
      event.stopPropagation();
      this.toggleMenu();
    };

    connectedCallback() {
      if (this.initialized) {
        return;
      }

      this.button = this.querySelector('[data-toggle-language]');
      this.menu = this.querySelector('[data-language-menu]');

      if (!this.button || !this.menu) {
        return;
      }

      this.button.addEventListener('click', this.handleButtonClick);
      this.button.setAttribute('aria-haspopup', 'true');
      this.button.setAttribute('aria-expanded', this.isOpen() ? 'true' : 'false');

      LanguageSelectorElement.instances.add(this);
      LanguageSelectorElement.attachDocumentListeners();
      this.initialized = true;
    }

    disconnectedCallback() {
      if (!this.initialized) {
        return;
      }

      if (this.button) {
        this.button.removeEventListener('click', this.handleButtonClick);
      }

      LanguageSelectorElement.instances.delete(this);
      LanguageSelectorElement.detachDocumentListenersIfUnused();

      this.button = undefined;
      this.menu = undefined;
      this.initialized = false;
    }

    handleDocumentClick(event) {
      if (!this.isConnected || !this.menu) {
        return;
      }

      const target = event.target;
      if (!(target instanceof Node)) {
        return;
      }

      if (this.contains(target)) {
        return;
      }

      this.closeMenu();
    }

    handleEscape() {
      if (!this.isOpen()) {
        return;
      }

      this.closeMenu(true);
    }

    isOpen() {
      return Boolean(this.menu && !this.menu.classList.contains('hidden'));
    }

    toggleMenu() {
      if (this.isOpen()) {
        this.closeMenu();
        return;
      }

      this.openMenu();
    }

    openMenu() {
      if (!this.menu || !this.button) {
        return;
      }

      this.menu.classList.remove('hidden');
      this.button.setAttribute('aria-expanded', 'true');
    }

    closeMenu(focusButton = false) {
      if (!this.menu || !this.button || !this.isOpen()) {
        return;
      }

      this.menu.classList.add('hidden');
      this.button.setAttribute('aria-expanded', 'false');

      if (focusButton) {
        this.button.focus();
      }
    }
  }

  if (!customElements.get('language-selector')) {
    customElements.define('language-selector', LanguageSelectorElement);
  }
</script>
