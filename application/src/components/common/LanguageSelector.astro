---
import { Icon } from 'astro-icon/components';
import { languages } from '~/i18n/ui';
import { getLangFromUrl, useTranslatedPath } from '~/i18n/utils';

const languageSelectorScript = await import('~/scripts/language-selector.ts?url');

export interface Props {
  showLabels?: boolean;
  class?: string;
}

const { showLabels = false, class: className = '' } = Astro.props;

const currentLang = getLangFromUrl(Astro.url);
const translatePath = useTranslatedPath(currentLang);

// Get current path without language prefix
const pathname = Astro.url.pathname;
const pathWithoutLang = pathname.replace(/^\/(en|fr)(\/|$)/, '/');
const normalizedPath = pathWithoutLang === '' ? '/' : pathWithoutLang;

// Function to get the equivalent path in the target language
const getLocalizedPath = (targetLang: keyof typeof languages) => translatePath(normalizedPath, targetLang);
---

<div class={`relative inline-flex ${className}`} data-language-selector>
  <button
    type="button"
    class="text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-hidden focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
    aria-label="Select language"
    data-toggle-language
  >
    <Icon name="tabler:language" class="w-5 h-5" />
    {showLabels && <span class="ml-2">{languages[currentLang]}</span>}
    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-1" />
  </button>

  <div
    class="hidden absolute right-0 top-full mt-2 w-40 rounded-lg shadow-lg bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 z-50"
    data-language-menu
  >
    {
      Object.entries(languages).map(([lang, label]) => {
        const typedLang = lang as keyof typeof languages;

        return (
          <a
            href={getLocalizedPath(typedLang)}
            class:list={[
              'block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 first:rounded-t-lg last:rounded-b-lg',
              {
                'bg-gray-50 dark:bg-gray-900 font-semibold': currentLang === lang,
                'text-gray-700 dark:text-gray-300': currentLang !== lang,
              },
            ]}
            hreflang={typedLang}
          >
            <span class="flex items-center">
              {lang === 'fr' ? 'ðŸ‡«ðŸ‡·' : 'ðŸ‡¬ðŸ‡§'}
              <span class="ml-2">{label}</span>
              {currentLang === lang && <Icon name="tabler:check" class="w-4 h-4 ml-auto text-primary" />}
            </span>
          </a>
        );
      })
    }
  </div>
</div>

<script type="module" src={languageSelectorScript.default} is:inline></script>
