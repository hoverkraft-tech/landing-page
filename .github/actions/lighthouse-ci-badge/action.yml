name: "Lightouse CI results to badge"
description: "Generate badge from lighthouse CI results"

inputs:
  links:
    description: "A JSON string with a links to uploaded lighthouse CI results. @see https://github.com/treosh/lighthouse-ci-action#outputs"
    required: true
  manifest:
    description: "A JSON string with a manifest of the lighthouse CI results. @see https://github.com/treosh/lighthouse-ci-action#outputs"
    required: true
  badge_format:
    description: "The markup format for the badge"
    required: false
    default: "html"
  badge_title:
    description: "The title of the badge"
    required: false
    default: "Go to Lighthouse report"
  update_readme:
    description: "Whether to update the README.md file"
    required: false
    default: "true"
  commit_message:
    description: "The commit message for the badge update"
    required: false
    default: "docs: Update Lighthouse badge"

outputs:
  badge:
    description: "The badge markup"
    value: ${{ steps.generate-badge.outputs.badge }}

runs:
  using: "composite"
  steps:
    - id: enhance-manifest
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const manifest = ${{ inputs.manifest }};
          for(const manifestEntry of manifest){
            core.summary.addHeading(manifestEntry.url, 3);

            const summaryKeys = Object.keys(manifestEntry.summary);
            const sum = summaryKeys.reduce(
              (currentSum, key) => (currentSum += manifestEntry.summary[key]),
              0
            );

            const average = Math.round((sum / summaryKeys.length) * 100);
            manifestEntry.average = average;
          }

          return manifest;

    - name: Print summary
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const manifest = ${{ steps.enhance-manifest.outputs.result }};
          core.summary.addHeading("Lighthouse CI results summary", 2);
          for(const manifestEntry of manifest){
            core.summary.addLink(manifestEntry.url,manifestEntry.url);
            core.summary.addHeading(`Score average: manifestEntry.average/100}`, 4);

            const summaryKeys = Object.keys(manifestEntry.summary);
            
            core.summary.addTable([
              [
                { header: true, data: 'Metric' },
                { header: true, data: 'Score' },
              ],
              ...summaryKeys.map(summaryKey => ([
                summaryKey,
                manifestEntry.summary[summaryKey]
              ]))
            ]);

            core.summary.addSeparator();
          }

          core.summary.write();

    - id: generate-badge
      uses: actions/github-script@v7.0.1
      with:
        script: |
          const averageToColor = (average) => {
            if (average >= 95) return 'brightgreen';
            if (average >= 90) return 'green';
            if (average >= 75) return 'yellowgreen';
            if (average >= 60) return 'yellow';
            if (average >= 40) return 'orange';
            return 'red';
          };

          const { readFileSync, writeFileSync } = require('fs');

          const lighthouseLinks = ${{ inputs.links }};
          const reportUrl = lighthouseLinks[Object.keys(lighthouseLinks)[0]];
          const manifest = ${{ steps.enhance-manifest.outputs.result }};

          const [{ average }] = ${{ inputs.manifest }};
          const color = averageToColor(average);
          const badgeUrl = `https://img.shields.io/badge/Lighthouse-${average}%25-${color}?logo=lighthouse`;

          const badgeFormat = `${{ inputs.badge_format }}`;
          let badgeMarkup = '';
          switch(badgeFormat) {
            case 'markdown':
              badgeMarkup = `[![Lighthouse](${badgeUrl})](${reportUrl} "${{ inputs.badge_title }}")`;
              break;
            case 'html':
              badgeMarkup = `<a title="${{ inputs.badge_title }}" href="${reportUrl}" target="_blank"><img alt="Lighthouse" src="${ badgeUrl }" /></a>`;
              break;
            default:
              throw new Error('Unknown badge format');
          }

          core.setOutput('badge', badgeMarkup);

    - id: write-badge
      if: ${{ inputs.update_readme }} == 'true'
      uses: actions/github-script@v7.0.1
      with:
        script: |
          // Get readme file content
          const { readFileSync, writeFileSync } = require('fs');
          const { join } = require('path');

          // Get badge markup
          const badgeMarkup = `${{ steps.generate-badge.outputs.badge }}`;
          const lighthouseBadgeSeparator = '<!-- Lighthouse badge -->';
          const badgeRegex = new RegExp(`(${lighthouseBadgeSeparator})([\\s\\S]*?)(${lighthouseBadgeSeparator})`, 'g');

          // Get readme file content
          const readmePath = join(process.env.GITHUB_WORKSPACE, 'README.md');
          const readmeContent = readFileSync(readmePath, 'utf8');

          // Replace badge markup
          const newReadmeContent = readmeContent.replace(badgeRegex, `$1${badgeMarkup}$3`);

          const readmeContentHasChanged = readmeContent !== newReadmeContent;
          core.setOutput('readme_content_has_changed', readmeContentHasChanged);

          // Write new readme file content
          if (readmeContentHasChanged) {
            writeFileSync(readmePath, newReadmeContent, 'utf8');          
          }
  
    - uses: stefanzweifel/git-auto-commit-action@v5
      if: steps.write-badge.outputs.readme_content_has_changed == 'true'
      with:
        commit_message: ${{ inputs.commit_message }}